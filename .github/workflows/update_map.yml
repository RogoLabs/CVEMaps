name: Update CVE Map Data

on:
  # Allow manual trigger
  workflow_dispatch:
  
  # Trigger on push to main branch (for testing)
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - '.gitattributes'
  
  # Run every 3 hours
  schedule:
    - cron: '0 */3 * * *'

# Required permissions for GitHub Pages deployment
permissions:
  contents: read      # Read repository contents
  pages: write        # Deploy to GitHub Pages
  id-token: write     # OIDC token for deployment
  actions: read       # Read workflow run data

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Cache CVE data
        id: cache-cve
        uses: actions/cache@v3
        with:
          path: cve-data
          key: cve-data-${{ github.run_id }}
          restore-keys: |
            cve-data-
      
      - name: Setup CVE data directory
        run: |
          # Remove existing directory if it exists (handles cache restoration issues)
          if [ -d "cve-data" ]; then
            echo "Removing existing cve-data directory..."
            rm -rf cve-data
          fi
      
      - name: Clone CVE data repository
        run: |
          echo "Cloning CVE data repository..."
          git clone --depth 1 https://github.com/CVEProject/cvelistV5.git cve-data
          echo "Clone complete. Repository size:"
          du -sh cve-data
      
      - name: Run unified build script
        run: |
          echo "Building all CVE visualizations..."
          python scripts/build_all.py
          echo "Build complete!"
      
      - name: Verify output
        run: |
          echo "Checking output files..."
          ls -lh web/data/
          
          # Check main graph
          if [ -f web/data/cna_to_cwe_map.json ]; then
            echo "âœ“ Main graph data file created successfully"
            echo "  File size: $(du -h web/data/cna_to_cwe_map.json | cut -f1)"
          else
            echo "âœ— ERROR: Main graph data file not found!"
            exit 1
          fi
          
          # Check alternative graphs (optional)
          echo ""
          echo "Alternative visualization files:"
          for file in cwe_cooccurrence_map.json top_cna_cwe_bipartite.json cwe_hierarchy_tree.json \
                      cwe_star_graphs.json cwe_circular_layout.json cna_collaboration.json mitre_ego_network.json; do
            if [ -f "web/data/$file" ]; then
              echo "  âœ“ $file ($(du -h "web/data/$file" | cut -f1))"
            else
              echo "  âš  $file not found (optional)"
            fi
          done
      
      - name: Generate build summary
        run: |
          echo "## Build Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh web/data/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Statistics" >> $GITHUB_STEP_SUMMARY
          if [ -f web/data/cna_to_cwe_map.json ]; then
            echo "- **Main Graph Size**: $(du -h web/data/cna_to_cwe_map.json | cut -f1)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: $(python --version)" >> $GITHUB_STEP_SUMMARY
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './web'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Build failed! Check the logs for details."
